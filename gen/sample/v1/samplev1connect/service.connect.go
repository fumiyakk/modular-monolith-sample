// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sample/v1/service.proto

package samplev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/fumiyakk/modular-monolith-sample/gen/sample/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SampleServiceName is the fully-qualified name of the SampleService service.
	SampleServiceName = "sample.v1.SampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SampleServiceCreateUserProcedure is the fully-qualified name of the SampleService's CreateUser
	// RPC.
	SampleServiceCreateUserProcedure = "/sample.v1.SampleService/CreateUser"
	// SampleServiceGetContractProcedure is the fully-qualified name of the SampleService's GetContract
	// RPC.
	SampleServiceGetContractProcedure = "/sample.v1.SampleService/GetContract"
	// SampleServiceGetUserProcedure is the fully-qualified name of the SampleService's GetUser RPC.
	SampleServiceGetUserProcedure = "/sample.v1.SampleService/GetUser"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sampleServiceServiceDescriptor           = v1.File_sample_v1_service_proto.Services().ByName("SampleService")
	sampleServiceCreateUserMethodDescriptor  = sampleServiceServiceDescriptor.Methods().ByName("CreateUser")
	sampleServiceGetContractMethodDescriptor = sampleServiceServiceDescriptor.Methods().ByName("GetContract")
	sampleServiceGetUserMethodDescriptor     = sampleServiceServiceDescriptor.Methods().ByName("GetUser")
)

// SampleServiceClient is a client for the sample.v1.SampleService service.
type SampleServiceClient interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetContract(context.Context, *connect.Request[v1.GetContractRequest]) (*connect.Response[v1.GetContractResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
}

// NewSampleServiceClient constructs a client for the sample.v1.SampleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sampleServiceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+SampleServiceCreateUserProcedure,
			connect.WithSchema(sampleServiceCreateUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getContract: connect.NewClient[v1.GetContractRequest, v1.GetContractResponse](
			httpClient,
			baseURL+SampleServiceGetContractProcedure,
			connect.WithSchema(sampleServiceGetContractMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+SampleServiceGetUserProcedure,
			connect.WithSchema(sampleServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sampleServiceClient implements SampleServiceClient.
type sampleServiceClient struct {
	createUser  *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getContract *connect.Client[v1.GetContractRequest, v1.GetContractResponse]
	getUser     *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
}

// CreateUser calls sample.v1.SampleService.CreateUser.
func (c *sampleServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetContract calls sample.v1.SampleService.GetContract.
func (c *sampleServiceClient) GetContract(ctx context.Context, req *connect.Request[v1.GetContractRequest]) (*connect.Response[v1.GetContractResponse], error) {
	return c.getContract.CallUnary(ctx, req)
}

// GetUser calls sample.v1.SampleService.GetUser.
func (c *sampleServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// SampleServiceHandler is an implementation of the sample.v1.SampleService service.
type SampleServiceHandler interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetContract(context.Context, *connect.Request[v1.GetContractRequest]) (*connect.Response[v1.GetContractResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
}

// NewSampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSampleServiceHandler(svc SampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sampleServiceCreateUserHandler := connect.NewUnaryHandler(
		SampleServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(sampleServiceCreateUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sampleServiceGetContractHandler := connect.NewUnaryHandler(
		SampleServiceGetContractProcedure,
		svc.GetContract,
		connect.WithSchema(sampleServiceGetContractMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sampleServiceGetUserHandler := connect.NewUnaryHandler(
		SampleServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(sampleServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sample.v1.SampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SampleServiceCreateUserProcedure:
			sampleServiceCreateUserHandler.ServeHTTP(w, r)
		case SampleServiceGetContractProcedure:
			sampleServiceGetContractHandler.ServeHTTP(w, r)
		case SampleServiceGetUserProcedure:
			sampleServiceGetUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSampleServiceHandler struct{}

func (UnimplementedSampleServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sample.v1.SampleService.CreateUser is not implemented"))
}

func (UnimplementedSampleServiceHandler) GetContract(context.Context, *connect.Request[v1.GetContractRequest]) (*connect.Response[v1.GetContractResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sample.v1.SampleService.GetContract is not implemented"))
}

func (UnimplementedSampleServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sample.v1.SampleService.GetUser is not implemented"))
}
